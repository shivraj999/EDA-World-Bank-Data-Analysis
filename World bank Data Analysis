{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOSC6Ow4VSWDXZzVb7e+nH+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["PROJECT NAME - WORLD BANK DATA **ANALYSIS**"],"metadata":{"id":"JIT4ZBXPgpZ2"}},{"cell_type":"markdown","source":["**This Project By Shivraj D Autade**"],"metadata":{"id":"7hrnB2RJgM8v"}},{"cell_type":"markdown","source":["Task-1: Data Identification\n","For this analysis, the following API has been selected: https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-api-documentation\n","\n","The World Bank data consists of demographic and other statistical data related to Population, Employment, Health, GDP, Energy Consumption, etc. for all the countries from the year 1960 to 2018. These categories are called indicators and are each defined by a code.\n","\n","The following indicators have been chosen for analysis:\n","\n","SP.POP.TOTL - Total Population\n","SP.POP.TOTL.FE.IN - Total Female Population\n","SP.POP.TOTL.MA.IN - Total Male Population\n","SP.DYN.CBRT.IN Birth Rate\n","SP.DYN.CDRT.IN Death Rate\n","SE.COM.DURS - Compulsory Education Duration\n","SL.IND.EMPL.ZS - Employment in Industry(%)\n","SL.AGR.EMPL.ZS - Employment in Agriculture(%)\n","SL.AGR.EMPL.FE.ZS - Female Employment in Agriculture(%)\n","SL.IND.EMPL.FE.ZS - Female Employment in Industry(%)\n","SL.UEM.TOTL.ZS - Unemployment(%)\n","NY.GDP.MKTP.CD - GDP in USD\n","NY.ADJ.NNTY.PC.KD.ZG - National Income per Capita\n","NY.GSR.NFCY.CD - Net income from Abroad\n","NV.AGR.TOTL.CD - Agriculture value added(in USD)\n","EG.USE.ELEC.KH.PC - Electric Power Consumption(kWH per capita)\n","EG.FEC.RNEW.ZS - Renewable Energy Consumption (%)\n","EG.USE.COMM.FO.ZS - Fossil Fuel Consumption (%)"],"metadata":{"id":"pAtl-cpIhU2D"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oq4UyGs8VTa4"},"outputs":[],"source":["\n","Exploratory Data Analysis on the World Bank Data\n","The objective of this project is to collect data from the World Bank Open APIs and prepare and analyse the data using Python.\n","\n","import pandas as pd\n","import numpy as np\n","import requests\n","\n","from IPython.display import display\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","Task-1: Data Identification\n","For this analysis, the following API has been selected: https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-api-documentation\n","\n","The World Bank data consists of demographic and other statistical data related to Population, Employment, Health, GDP, Energy Consumption, etc. for all the countries from the year 1960 to 2018. These categories are called indicators and are each defined by a code.\n","\n","The following indicators have been chosen for analysis:\n","\n","SP.POP.TOTL - Total Population\n","SP.POP.TOTL.FE.IN - Total Female Population\n","SP.POP.TOTL.MA.IN - Total Male Population\n","SP.DYN.CBRT.IN Birth Rate\n","SP.DYN.CDRT.IN Death Rate\n","SE.COM.DURS - Compulsory Education Duration\n","SL.IND.EMPL.ZS - Employment in Industry(%)\n","SL.AGR.EMPL.ZS - Employment in Agriculture(%)\n","SL.AGR.EMPL.FE.ZS - Female Employment in Agriculture(%)\n","SL.IND.EMPL.FE.ZS - Female Employment in Industry(%)\n","SL.UEM.TOTL.ZS - Unemployment(%)\n","NY.GDP.MKTP.CD - GDP in USD\n","NY.ADJ.NNTY.PC.KD.ZG - National Income per Capita\n","NY.GSR.NFCY.CD - Net income from Abroad\n","NV.AGR.TOTL.CD - Agriculture value added(in USD)\n","EG.USE.ELEC.KH.PC - Electric Power Consumption(kWH per capita)\n","EG.FEC.RNEW.ZS - Renewable Energy Consumption (%)\n","EG.USE.COMM.FO.ZS - Fossil Fuel Consumption (%)\n","The following countries have been chosen for analysis:\n","\n","US - United States of America\n","IN - India\n","CN - China\n","JP - Japan\n","CA - Canada\n","GB - Great Britain\n","ZA - South Africa\n","The base API URL is http://api.worldbank.org/v2/ and is followed by the country code and indicator code to obtain the data for each year. No authentication is required to use the API.\n","\n","Task-2: Data Collection\n","Defining Constants\n","Since the API uses codes, we have created a mapping between the codes and meaningful names to use while parsing and storing the data.\n","\n","# Base URL used in all the API calls\n","BASE_URL='http://api.worldbank.org/v2/'\n","\n","# List of indicators according to the features defined above\n","INDICATOR_CODES=['SP.POP.TOTL', 'SP.POP.TOTL.FE.IN', 'SP.POP.TOTL.MA.IN',\n"," 'SP.DYN.CBRT.IN', 'SP.DYN.CDRT.IN',\n"," 'SE.COM.DURS',\n"," 'SL.IND.EMPL.ZS', 'SL.AGR.EMPL.ZS', 'SL.AGR.EMPL.FE.ZS', 'SL.IND.EMPL.FE.ZS', 'SL.UEM.TOTL.ZS',\n"," 'NY.GDP.MKTP.CD',\n"," 'NY.ADJ.NNTY.PC.KD.ZG', 'NY.GSR.NFCY.CD', 'NV.AGR.TOTL.CD',\n"," 'EG.USE.ELEC.KH.PC', 'EG.FEC.RNEW.ZS', 'EG.USE.COMM.FO.ZS']\n","\n","COUNTRY_LIST=['USA', 'India', 'China', 'Japan', 'Canada', 'Great Britain', 'South Africa']\n","\n","# mapping of feature codes to more meaningful names\n","featureMap={\n","    \"SP.POP.TOTL\": \"Total Population\",\n","    \"SP.POP.TOTL.FE.IN\": \"Female Population\",\n","    \"SP.POP.TOTL.MA.IN\": \"Male Population\",\n","    \"SP.DYN.CBRT.IN\": \"Birth Rate\",\n","    \"SP.DYN.CDRT.IN\": \"Death Rate\",\n","    \"SE.COM.DURS\": \"Compulsory Education Dur.\",\n","    \"SL.IND.EMPL.ZS\":\"Employment in Industry(%)\",\n","    \"SL.AGR.EMPL.ZS\": \"Employment in Agriculture(%)\",\n","    \"SL.AGR.EMPL.FE.ZS\": \"Female Employment in Agriculture(%)\",\n","    \"SL.IND.EMPL.FE.ZS\": \"Female Employment in Industry(%)\",\n","    \"SL.UEM.TOTL.ZS\": \"Unemployment(%)\",\n","    \"NY.GDP.MKTP.CD\": \"GDP in USD\",\n","    \"NY.ADJ.NNTY.PC.KD.ZG\":\"National Income per Capita\",\n","    \"NY.GSR.NFCY.CD\":\"Net income from Abroad\",\n","    \"NV.AGR.TOTL.CD\":\"Agriculture value added(in USD)\",\n","    \"EG.USE.ELEC.KH.PC\":\"Electric Power Consumption(kWH per capita)\",\n","    \"EG.FEC.RNEW.ZS\":\"Renewable Energy Consumption (%)\",\n","    \"EG.USE.COMM.FO.ZS\":\"Fossil Fuel Consumption (%)\"\n","}\n","\n","# Mapping of country codes to their actual names\n","countryMap={\n","    \"US\": \"USA\",\n","    \"IN\":\"India\",\n","    \"CN\": \"China\",\n","    \"JP\": \"Japan\",\n","    \"CA\": \"Canada\",\n","    \"GB\": \"Great Britain\",\n","    \"ZA\": \"South Africa\"\n","}\n","\n","# constant parameters used in sending the request.\n","params = dict()\n","# to ensure we receive a JSON response\n","params['format']='json'\n","# The data we fetch is for 59 years.\n","# Hence we change the default page size of 50 to 100 to ensure we need only one API call per feature.\n","params['per_page']='100'\n","# Range of years for which the data is needed\n","params['date']='1960:2018'\n","Fetch data through API calls\n","The following functions have been written to make an API call per feature and fetch the data. Each of these functions performs the following tasks:\n","\n","getCountrywiseDF(): Calls the loadJSONData function for the country specified and returns a dataframe with the complete data for one country.\n","loadJSONData(): Forms the appropriate URL using the base URL, country code and indicator code and sends the request to the endpoint. It returns a list of list of values for all features.\n","# Function to get JSON data from the endpoint\n","def loadJSONData(country_code):\n","    dataList=[]\n","\n","    # iterate over each indicator code specified in the contant INDICATOR_CODES defined above\n","    for indicator in INDICATOR_CODES:\n","\n","        # form the URL in the desired format\n","        # E.g: http://api.worldbank.org/v2/countries/us/indicators/SP.POP.TOTL?format=json&per_page=200&date=1960:2018\n","        url=BASE_URL+'countries/'+country_code.lower()+'/indicators/'+indicator\n","\n","        # send the request using the resquests module\n","        response = requests.get(url, params=params)\n","\n","        # validate the response status code\n","        # The API returns a status_code 200 even for error messages,\n","        # however, the response body contains a field called \"message\" that includes the details of the error\n","        # check if message is not present in the response\n","        if response.status_code == 200 and (\"message\" not in response.json()[0].keys()):\n","            # print(\"Successfully got data for: \" + str(featureMap[indicator]))\n","\n","            # list of values for one feature\n","            indicatorVals=[]\n","\n","            # the response is an array containing two arrays - [[{page: 1, ...}], [{year: 2018, SP.POP.TOTL: 123455}, ...]]\n","            # hence we check if the length of the response is >1\n","            if len(response.json()) > 1:\n","\n","                # if yes, iterate over each object in the response\n","                # each object gives one single value for each year\n","                for obj in response.json()[1]:\n","\n","                    # check for empty values\n","                    if obj['value'] is \"\" or obj['value'] is None:\n","                        indicatorVals.append(None)\n","                    else:\n","                    # if a value is present, add it to the list of indicator values\n","                        indicatorVals.append(float(obj['value']))\n","                dataList.append(indicatorVals)\n","        else:\n","            # print an error message if the API call failed\n","            print(\"Error in Loading the data. Status Code: \" + str(response.status_code))\n","\n","    # Once all the features have been obtained, add the values for the \"Year\"\n","    # The API returns the indicator values from the most recent year. Hence, we create a list of years in reverse order\n","    dataList.append([year for year in range(2018, 1959, -1)])\n","    # return the list of lists of feature values [[val1,val2,val3...], [val1,val2,val3...], [val1,val2,val3...], ...]\n","    return dataList\n","\n","#----------------------------------------------------------------------------------------------------\n","\n","# function to invokde the loadJSONData function and form the final DataFrame for each country\n","def getCountrywiseDF(country_code):\n","\n","    # The resulting dataframe needs to have meaningful column names\n","    # hence we create a list of column names from the map defined above\n","    col_list=list(featureMap.values())\n","    # append the year column name\n","    col_list.append('Year')\n","\n","    print(\"------------------Loading data for: \"+countryMap[country_code]+\"-----------------------\")\n","\n","    # for the given country call the loadJSONData function and fetch the data from the API\n","    dataList=loadJSONData(country_code)\n","\n","    # transform the list of lists of features into a DataFrame\n","    # np.column_stack is used to add each list as a column\n","    df=pd.DataFrame(np.column_stack(dataList), columns=col_list)\n","\n","    # add the country column by extracting the country name from the map using the country code\n","    df['Country'] = countryMap[country_code]\n","\n","    # display the resulting dataframe\n","    display(df.head())\n","\n","    # return the formed dataframe for the given country\n","    return df\n","# Call the getCountrywiseDF function with the code of each country under consideration\n","# We will have a seperate dataframe for each country - 7 data frames\n","\n","US_df=getCountrywiseDF('US')\n","IN_df=getCountrywiseDF('IN')\n","CN_df=getCountrywiseDF('CN')\n","JP_df=getCountrywiseDF('JP')\n","CA_df=getCountrywiseDF('CA')\n","GB_df=getCountrywiseDF('GB')\n","ZA_df=getCountrywiseDF('ZA')\n","\n","print(\"Data Loading Completed\")\n","------------------Loading data for: USA-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t327,167,434.0\t165,285,036.0\t161,882,398.0\tNone\tNone\t12.0\t19.4\t1.4\t0.8\t8.5\t3.9\t20,544,343,456,936.5\tNone\t267,900,000,000.0\tNone\tNone\tNone\tNone\t2018\tUSA\n","1\t325,147,121.0\t164,275,323.0\t160,871,798.0\t11.8\t8.5\t12.0\t19.7\t1.4\t0.8\t8.7\t4.4\t19,485,393,853,000.0\t2.2\t243,296,000,000.0\t178,579,605,000.0\tNone\tNone\tNone\t2017\tUSA\n","2\t323,071,342.0\t163,245,729.0\t159,825,613.0\t12.2\t8.5\t12.0\t19.8\t1.4\t0.8\t8.7\t4.9\t18,707,188,235,000.0\t-0.1\t218,168,000,000.0\t175,923,170,000.0\tNone\tNone\tNone\t2016\tUSA\n","3\t320,742,673.0\t162,097,641.0\t158,645,032.0\t12.4\t8.4\t12.0\t19.9\t1.4\t0.7\t8.8\t5.3\t18,219,297,584,000.0\t2.4\t224,626,000,000.0\t189,947,276,000.0\tNone\t8.7\t82.4\t2015\tUSA\n","4\t318,386,421.0\t160,946,480.0\t157,439,941.0\t12.5\t8.2\t12.0\t20.0\t1.4\t0.7\t8.9\t6.2\t17,521,746,534,000.0\t2.9\t241,062,000,000.0\t208,273,224,000.0\t12,994.0\t8.8\t83.1\t2014\tUSA\n","------------------Loading data for: India-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t1,352,617,328.0\t649,574,719.0\t703,042,609.0\tNone\tNone\t8.0\t24.7\t43.9\t57.1\t18.7\t2.6\t2,718,732,231,257.6\tNone\t-27,691,371,968.3\t396,987,486,510.1\tNone\tNone\tNone\t2018\tIndia\n","1\t1,338,658,835.0\t642,787,641.0\t695,871,194.0\t18.1\t7.2\t8.0\t24.5\t44.5\t57.6\t18.7\t2.6\t2,652,242,857,923.9\t4.0\t-28,673,153,563.2\t414,265,878,403.3\tNone\tNone\tNone\t2017\tIndia\n","2\t1,324,509,589.0\t635,908,885.0\t688,600,704.0\t18.3\t7.2\t8.0\t24.3\t45.1\t58.2\t18.6\t2.7\t2,290,432,075,123.8\t6.4\t-26,300,115,592.2\t372,190,852,855.1\tNone\tNone\tNone\t2016\tIndia\n","3\t1,310,152,403.0\t628,929,065.0\t681,223,338.0\t18.6\t7.2\t8.0\t24.3\t45.6\t58.6\t18.7\t2.8\t2,103,587,813,812.8\t7.6\t-24,405,488,068.3\t340,244,981,475.1\tNone\t36.0\tNone\t2015\tIndia\n","4\t1,295,604,184.0\t621,854,638.0\t673,749,546.0\t19.0\t7.2\t8.0\t24.4\t46.1\t59.1\t18.7\t2.8\t2,039,127,446,298.6\t5.8\t-24,112,069,639.3\t342,408,945,451.4\t804.5\t36.7\t73.6\t2014\tIndia\n","------------------Loading data for: China-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t1,392,730,000.0\t677,972,245.0\t714,757,755.0\tNone\tNone\t9.0\t28.6\t26.8\t24.2\t28.3\t4.4\t13,608,151,864,637.9\tNone\t-51,298,699,628.7\t978,452,524,165.8\tNone\tNone\tNone\t2018\tChina\n","1\t1,386,395,000.0\t674,707,818.0\t711,687,182.0\t12.4\t7.1\t9.0\t29.0\t27.0\t24.4\t28.8\t4.4\t12,143,491,448,186.1\t4.8\t-9,688,110,315.4\t918,794,756,465.6\tNone\tNone\tNone\t2017\tChina\n","2\t1,378,665,000.0\t670,780,903.0\t707,884,097.0\t12.9\t7.1\t9.0\t29.1\t27.7\t25.1\t29.1\t4.5\t11,137,945,669,350.6\t7.5\t-44,951,463,616.5\t905,097,449,018.0\tNone\tNone\tNone\t2016\tChina\n","3\t1,371,220,000.0\t667,009,225.0\t704,210,775.0\t12.1\t7.1\t9.0\t29.2\t28.6\t26.0\t29.3\t4.6\t11,015,542,352,468.9\t7.4\t-41,788,839,823.4\t927,733,440,385.4\tNone\t12.4\tNone\t2015\tChina\n","4\t1,364,270,000.0\t663,493,378.0\t700,776,622.0\t12.4\t7.2\t9.0\t29.4\t29.5\t26.8\t29.7\t4.6\t10,438,529,153,237.6\t7.2\t13,298,824,755.0\t905,464,400,820.4\t3,927.0\t12.2\t87.7\t2014\tChina\n","------------------Loading data for: Japan-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t126,529,100.0\t64,731,350.0\t61,797,750.0\tNone\tNone\t9.0\t24.5\t3.4\t3.0\t14.0\t2.4\t4,971,323,079,771.9\tNone\tNone\tNone\tNone\tNone\tNone\t2018\tJapan\n","1\t126,785,797.0\t64,853,783.0\t61,932,014.0\t7.6\t10.8\t9.0\t24.6\t3.4\t3.0\t14.1\t2.8\t4,859,950,558,539.0\t1.4\t177,764,874,566.3\t57,797,299,055.4\tNone\tNone\tNone\t2017\tJapan\n","2\t126,994,511.0\t64,951,468.0\t62,043,043.0\t7.8\t10.5\t9.0\t25.6\t3.5\t3.0\t14.5\t3.1\t4,926,667,087,367.5\t1.5\t165,257,107,699.7\t59,665,658,303.1\tNone\tNone\tNone\t2016\tJapan\n","3\t127,141,000.0\t65,016,722.0\t62,124,278.0\t8.0\t10.3\t9.0\t25.9\t3.6\t3.2\t14.8\t3.4\t4,389,475,622,589.0\t4.1\t168,614,682,836.8\t48,894,606,458.7\tNone\t6.3\t93.0\t2015\tJapan\n","4\t127,276,000.0\t65,075,452.0\t62,200,548.0\t8.0\t10.1\t9.0\t26.0\t3.7\t3.3\t14.7\t3.6\t4,850,413,536,037.8\t0.5\t174,559,801,997.8\t51,233,292,919.4\t7,819.7\t5.6\t94.4\t2014\tJapan\n","------------------Loading data for: Canada-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t37,058,856.0\t18,674,525.0\t18,384,331.0\tNone\tNone\t10.0\t19.5\t1.5\t0.9\t8.4\t5.9\t1,713,341,704,877.0\tNone\t-22,155,520,038.5\tNone\tNone\tNone\tNone\t2018\tCanada\n","1\t36,540,268.0\t18,417,231.0\t18,123,037.0\t10.3\t7.5\t10.0\t19.5\t1.5\t1.0\t8.5\t6.3\t1,646,867,220,617.5\t3.9\t-19,163,504,935.8\tNone\tNone\tNone\tNone\t2017\tCanada\n","2\t36,109,487.0\t18,202,997.0\t17,906,490.0\t10.6\t7.4\t10.0\t19.6\t1.9\t1.1\t8.5\t7.0\t1,526,705,529,135.3\t-0.3\t-18,668,313,909.5\tNone\tNone\tNone\tNone\t2016\tCanada\n","3\t35,702,908.0\t17,999,309.0\t17,703,599.0\t10.7\t7.4\t10.0\t19.9\t1.6\t1.0\t8.5\t6.9\t1,552,899,925,233.7\t-2.9\t-23,844,486,211.7\t26,575,200,689.3\tNone\t22.0\t74.1\t2015\tCanada\n","4\t35,437,435.0\t17,864,828.0\t17,572,607.0\t10.8\t7.3\t10.0\t20.2\t1.7\t1.1\t8.6\t6.9\t1,801,480,123,070.8\t1.4\t-29,178,622,922.1\t25,667,412,178.7\t15,588.5\t22.0\t73.2\t2014\tCanada\n","------------------Loading data for: Great Britain-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t66,488,991.0\t33,666,883.0\t32,822,108.0\tNone\tNone\t11.0\t18.1\t1.1\t0.6\t7.6\t4.0\t2,855,296,731,522.0\tNone\t-38,490,804,137.5\t18,020,718,920.3\tNone\tNone\tNone\t2018\tGreat Britain\n","1\t66,058,859.0\t33,464,674.0\t32,594,185.0\t11.4\t9.2\t11.0\t18.2\t1.2\t0.6\t7.7\t4.3\t2,666,229,179,958.0\t1.9\t-31,787,538,497.2\t17,431,087,145.4\tNone\tNone\tNone\t2017\tGreat Britain\n","2\t65,595,565.0\t33,246,523.0\t32,349,042.0\t11.8\t9.1\t11.0\t18.5\t1.1\t0.6\t7.6\t4.8\t2,694,283,209,613.3\t1.0\t-64,716,135,083.3\t16,288,737,010.4\tNone\tNone\tNone\t2016\tGreat Britain\n","3\t65,128,861.0\t33,027,804.0\t32,101,057.0\t11.9\t9.2\t11.0\t18.7\t1.1\t0.6\t7.7\t5.3\t2,928,591,002,002.5\t2.0\t-66,997,636,392.8\t18,200,415,988.6\tNone\t8.7\t80.4\t2015\tGreat Britain\n","4\t64,613,160.0\t32,785,655.0\t31,827,505.0\t12.0\t8.8\t11.0\t19.0\t1.3\t0.7\t7.9\t6.1\t3,063,803,240,208.0\t2.7\t-62,560,715,026.0\t20,435,074,169.1\t5,129.5\t7.4\t82.7\t2014\tGreat Britain\n","------------------Loading data for: South Africa-----------------------\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t57,779,622.0\t29,290,888.0\t28,488,734.0\tNone\tNone\t9.0\t23.2\t5.2\t3.7\t12.1\t27.0\t368,288,939,768.3\tNone\t-11,640,181,654.7\t8,014,039,701.1\tNone\tNone\tNone\t2018\tSouth Africa\n","1\t57,000,451.0\t28,883,601.0\t28,116,850.0\t20.9\t9.5\t9.0\t23.3\t5.2\t3.7\t12.2\t27.3\t349,554,116,683.8\t0.8\t-10,483,365,758.0\t8,253,798,946.9\tNone\tNone\tNone\t2017\tSouth Africa\n","2\t56,203,654.0\t28,469,912.0\t27,733,742.0\t21.3\t9.6\t9.0\t23.3\t5.6\t3.9\t11.9\t26.6\t296,357,282,715.1\t-1.7\t-8,190,335,037.5\t6,591,156,314.6\tNone\tNone\tNone\t2016\tSouth Africa\n","3\t55,386,367.0\t28,049,364.0\t27,337,003.0\t21.7\t9.8\t9.0\t23.8\t5.6\t4.2\t11.8\t25.2\t317,620,522,794.8\t2.3\t-7,871,410,981.4\t6,634,302,430.5\tNone\t17.2\tNone\t2015\tSouth Africa\n","4\t54,545,991.0\t27,621,049.0\t26,924,942.0\t22.1\t10.0\t9.0\t23.4\t4.7\t3.2\t12.1\t24.9\t350,904,575,292.3\t0.5\t-9,363,726,900.5\t7,631,145,522.1\t4,197.9\t16.6\t86.8\t2014\tSouth Africa\n","\n","\n","Data Loading Completed\n","\n","Task-3: Data Pre-processing\n","The above data has just been collected through multiple API calls and combined together. As we can see from the dataframes that we created by fetching the features from the API calls, contain some missing values in some of the features. This means that the data needs some processing before using it for analysis.\n","\n","For easing the task of pre-processing and avoiding manually passing the dataframes to each of the following functions, we create a list of the dataframes created. The copy() method has been used to avoid changing the original unprocessed dataframes.\n","\n","# store all the DataFrames in a list to iteratively apply pre-processing steps\n","list_df=[US_df.copy(), IN_df.copy(), CN_df.copy(), JP_df.copy(), CA_df.copy(), GB_df.copy(), ZA_df.copy()]\n","Drop features with majority values missing\n","We need to identify the features with a large number of missing values. Such features are not useful for analysis and can be removed from the dataset. The following function has been implemented to perform this task.\n","\n","remove_missing_features(): This function takes a dataframe as a parameter. It finds the features that contain non-zero missing values. It then finds the percentage of missing values in each of the columns. The percentage of missing values is checked and if it is greater than 75%, the column is dropped from the dataframe and an updated dataframe is returned. If a column has more than 75% missing values it is absolutely not useful for analysis. This function is iteratively called on all of the dataframes created above.\n","# Function to identify missing features and remove features that aren't useful\n","\n","def remove_missing_features(df):\n","\n","    # validation for dataframe\n","    if df is None:\n","        print(\"No DataFrame received!\")\n","        return\n","\n","    # create a copy of the dataframe to avoid changing the original\n","    df_cp=df.copy()\n","\n","    print(\"Removing missing features for: \" + df_cp.iloc[0]['Country'])\n","\n","    # find features with non-zero missing values\n","    n_missing_vals=df.isnull().sum()\n","\n","    # get the index list of the features with non-zero missing values\n","    n_missing_index_list = list(n_missing_vals.index)\n","\n","    # calculate the percentage of missing values\n","    # shape[0] gives the number of rows in the dataframe, hence, by diving the no. number of missing values by the total\n","    # no. of rows we get the ratio of missing values - multipled by 100 to get percentage\n","    # here missing_percentage consists of key value pairs - column name: percentage of missing values\n","    missing_percentage = n_missing_vals[n_missing_vals!=0]/df.shape[0]*100\n","\n","    '''\n","    Example: missing_percentage\n","    Total Population 1.694915254237288\n","    Female Population 1.694915254237288\n","    Male Population 83.05084745762711\n","    Birth Rate 52.54237288135594\n","    '''\n","\n","    # list to maintain the columns to drop\n","    cols_to_trim=[]\n","\n","    # iterate over each key value pair\n","    for i,val in enumerate(missing_percentage):\n","        # if percentage value is > 75\n","        if val > 75:\n","            # add the corresponding column to the list of cols_to_trim\n","            cols_to_trim.append(n_missing_index_list[i])\n","\n","    # Example: cols_to_trim=['Male Population']\n","\n","    if len(cols_to_trim) > 0:\n","        # drop the columns identified using the dataframe drop() method\n","        df_cp=df_cp.drop(columns=cols_to_trim)\n","        print(\"Dropped Columns:\" + str(cols_to_trim))\n","    else:\n","        print(\"No columns dropped\")\n","\n","    # return the updated dataframe\n","    return df_cp\n","# call the function on each DF for each country.\n","# The function remove_missing_features will be applied on each dataframe in list_df through the map function in python.\n","list_df=list(map(remove_missing_features, list_df))\n","Removing missing features for: USA\n","No columns dropped\n","Removing missing features for: India\n","Dropped Columns:['Male Population']\n","Removing missing features for: China\n","No columns dropped\n","Removing missing features for: Japan\n","No columns dropped\n","Removing missing features for: Canada\n","No columns dropped\n","Removing missing features for: Great Britain\n","No columns dropped\n","Removing missing features for: South Africa\n","No columns dropped\n","We can see that the only column dropped was Male population from the country India. For rest of the countries, all the features consisted of less than 75% missing values. So far we have only removed features that had missing values greater than a certain threshold. This means that, some features may still contain missing values. The next task is to fill these missing values so that they can be used in analysis.\n","\n","Fill missing values\n","The following function has been implemented to fill the missing values in features:\n","\n","fill_missing_values(): This function takes a dataframe in which the missing values need to be filled. It uses the fillna() function of pandas dataframes to fill values that are NaNs. As observed from the raw dataframes populated above, the missing values are denoted by None. Hence we first fill NaN in place of None and then replace the NaNs with the mean value of the columns.\n","# Function to fill the remaining missing values with average values for columns\n","\n","def fill_missing_values(df):\n","\n","    # validation for dataframes\n","    if df is None:\n","        print(\"No DataFrame received\")\n","        return\n","\n","    # create a copy\n","    df_cp=df.copy()\n","\n","    print(\"Filling missing features for: \" + df_cp.iloc[0]['Country'])\n","\n","    # get the list of columns in the dataframe\n","    cols_list=list(df_cp.columns)\n","\n","    # exclude the last column - Country\n","    # This column was added explicitly when the data was loaded, hence, it does not contain any missing values.\n","    # Also, fillna function does not work on categorical features since it performs an aggregation.\n","    cols_list.pop()\n","\n","    # replace all None values with NaN, fillna only works on nans\n","    df_cp.fillna(value=pd.np.nan, inplace=True)\n","\n","    # replace all NaN values with the mean of the column values\n","    for col in cols_list:\n","        df_cp[col].fillna((df_cp[col].mean()), inplace=True)\n","\n","    print(\"Filling missing values completed\")\n","    return df_cp\n","# call the function on each DF for each country.\n","# The function fill_missing_features will be applied on each dataframe in list_df through the map function in python.\n","\n","list_df=list(map(fill_missing_values, list_df))\n","Filling missing features for: USA\n","Filling missing values completed\n","Filling missing features for: India\n","Filling missing values completed\n","Filling missing features for: China\n","Filling missing values completed\n","Filling missing features for: Japan\n","Filling missing values completed\n","Filling missing features for: Canada\n","Filling missing values completed\n","Filling missing features for: Great Britain\n","Filling missing values completed\n","Filling missing features for: South Africa\n","Filling missing values completed\n","Change the type of Numeric but Categorical Features\n","We can observe that the 'Year' column is a numeric value, however, it's magnitude does not have a significance. It actually represents a period and not an actual number. Hence, this column can be converted to a categorical variable. The following function has been implemented to achieve this:\n","\n","change_year_type(): This function takes a dataframe as a parameter and changes the dtype of year and returns the updated dataframe\n","# Function to change year type\n","def change_year_type(df):\n","\n","    print(\"Changing type of Year for: \" + df.loc[0]['Country'])\n","    # validation to check if year column exists in the dataframe\n","    if 'Year' in df.columns:\n","        # convert year to a string\n","        df['Year'] = df.Year.astype(str)\n","\n","    print(\"Completed changing type\")\n","    # return the updated df\n","    return df\n","# call the function on each DF for each country.\n","# The function fill_missing_features will be applied on each dataframe in list_df through the map function in python.\n","\n","list_df=list(map(change_year_type, list_df))\n","Changing type of Year for: USA\n","Completed changing type\n","Changing type of Year for: India\n","Completed changing type\n","Changing type of Year for: China\n","Completed changing type\n","Changing type of Year for: Japan\n","Completed changing type\n","Changing type of Year for: Canada\n","Completed changing type\n","Changing type of Year for: Great Britain\n","Completed changing type\n","Changing type of Year for: South Africa\n","Completed changing type\n","Derive deleted features\n","In one of the above steps, we can see that the column Male Population from the DF for country India was dropped since it had too many missing values. This feature may be useful in further analysis. Also, since rest of the DataFrames contain this column, to maintain consistency, we can derive this feature from Total Population and Female population.\n","\n","# pick the dataframe for the country India from the list of dataframes\n","dfIndia = list_df[1]\n","\n","# Male Population in any given year=Total Population - Female Population\n","# validation so that the operation does not fail\n","if 'Total Population' in dfIndia.columns and 'Female Population' in dfIndia.columns:\n","    # calculate\n","    dfIndia[\"Male Population\"] = dfIndia[\"Total Population\"] - dfIndia[\"Female Population\"]\n","else:\n","    # print error message\n","    print(\"One of the columns Total Population or Female Population is missing.\")\n","\n","list_df[1].head()\n","Total Population\tFemale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\tMale Population\n","0\t1,352,617,328.0\t649,574,719.0\t31.3\t12.3\t8.0\t24.7\t43.9\t57.1\t18.7\t2.6\t2,718,732,231,257.6\t3.5\t-27,691,371,968.3\t396,987,486,510.1\t335.2\t48.4\t54.7\t2018\tIndia\t703,042,609.0\n","1\t1,338,658,835.0\t642,787,641.0\t18.1\t7.2\t8.0\t24.5\t44.5\t57.6\t18.7\t2.6\t2,652,242,857,923.9\t4.0\t-28,673,153,563.2\t414,265,878,403.3\t335.2\t48.4\t54.7\t2017\tIndia\t695,871,194.0\n","2\t1,324,509,589.0\t635,908,885.0\t18.3\t7.2\t8.0\t24.3\t45.1\t58.2\t18.6\t2.7\t2,290,432,075,123.8\t6.4\t-26,300,115,592.2\t372,190,852,855.1\t335.2\t48.4\t54.7\t2016\tIndia\t688,600,704.0\n","3\t1,310,152,403.0\t628,929,065.0\t18.6\t7.2\t8.0\t24.3\t45.6\t58.6\t18.7\t2.8\t2,103,587,813,812.8\t7.6\t-24,405,488,068.3\t340,244,981,475.1\t335.2\t36.0\t54.7\t2015\tIndia\t681,223,338.0\n","4\t1,295,604,184.0\t621,854,638.0\t19.0\t7.2\t8.0\t24.4\t46.1\t59.1\t18.7\t2.8\t2,039,127,446,298.6\t5.8\t-24,112,069,639.3\t342,408,945,451.4\t804.5\t36.7\t73.6\t2014\tIndia\t673,749,546.0\n","We have now completed all our preprocessing steps and have 7 dataframes for the 7 countries under consideration. Let us now examine the number of features and and their datatypes\n","\n","Check the number of features\n","# each dataframe has the same number of columns. Hence, we only check the first dataframe in the list\n","\n","print('Total number of features: %d\\n'%(list_df[0].shape[1]))\n","list_df[0].dtypes\n","Total number of features: 20\n","\n","Total Population                              float64\n","Female Population                             float64\n","Male Population                               float64\n","Birth Rate                                    float64\n","Death Rate                                    float64\n","Compulsory Education Dur.                     float64\n","Employment in Industry(%)                     float64\n","Employment in Agriculture(%)                  float64\n","Female Employment in Agriculture(%)           float64\n","Female Employment in Industry(%)              float64\n","Unemployment(%)                               float64\n","GDP in USD                                    float64\n","National Income per Capita                    float64\n","Net income from Abroad                        float64\n","Agriculture value added(in USD)               float64\n","Electric Power Consumption(kWH per capita)    float64\n","Renewable Energy Consumption (%)              float64\n","Fossil Fuel Consumption (%)                   float64\n","Year                                           object\n","Country                                        object\n","dtype: object\n","We now have a total of 20 features to work on. We can see that all of the features are numeric except for Year and Country which are categorical\n","\n","Store the cleaned dataset into CSV files\n","The dataframes for the 7 countries are stored into different CSV files for further analysis. The following function has been implemented for this task:\n","\n","write_data(): Iterates over the list of dataframes and writes them to CSV files with the name of the country. For example, the file containing data for India is stored in the file India.csv\n","# Function to write processed data to CSV files\n","def write_data():\n","    # validation to check if the number of countries and the dataframes match\n","    assert len(list(countryMap.keys()))==len(list_df)\n","\n","    # iterate over country names from the country map and the list of dataframes simultaneously\n","    for country_name, df_data in zip(COUNTRY_LIST, list_df):\n","        print(\"Writing data for: \" + country_name)\n","        file_name=country_name+\".csv\"\n","        # convert to CSV\n","        try:\n","            df_data.to_csv(file_name, index=False)\n","            print(\"Successfully created: \" + file_name)\n","        except:\n","            # in case an error occurs in I/O\n","            print(\"Error in writing to: \" + file_name)\n","\n","        # Note that the order in which the countries have been maintained in the country_list\n","        # and the order in which they have been maintained is the same\n","# call the function\n","write_data()\n","Writing data for: USA\n","Successfully created: USA.csv\n","Writing data for: India\n","Successfully created: India.csv\n","Writing data for: China\n","Successfully created: China.csv\n","Writing data for: Japan\n","Successfully created: Japan.csv\n","Writing data for: Canada\n","Successfully created: Canada.csv\n","Writing data for: Great Britain\n","Successfully created: Great Britain.csv\n","Writing data for: South Africa\n","Successfully created: South Africa.csv\n","Task 5: Analyse and Summarise the cleaned dataset\n","Since we have all the pre-processed datasets, we can create visualisations from them to identify patterns. I have used the matplotlib and seaborn libraries to analyse the data.\n","\n","Read the cleaned data from the CSV files\n","We can now use the cleaned dataset for analysis. Hence we first read the CSV files we created in the previous task.\n","\n","# read the cleaned data from every CSV\n","try:\n","    df_cleaned_us=pd.read_csv('USA.csv')\n","    df_cleaned_in=pd.read_csv('India.csv')\n","    df_cleaned_cn=pd.read_csv('China.csv')\n","    df_cleaned_jp=pd.read_csv('Japan.csv')\n","    df_cleaned_ca=pd.read_csv('Canada.csv')\n","    df_cleaned_gb=pd.read_csv('Great Britain.csv')\n","    df_cleaned_za=pd.read_csv('South Africa.csv')\n","    print(\"Successfully read all the files\")\n","except:\n","    # handling I/O exceptions\n","    print(\"Unexpected error in reading a file. Check the file path and if a file exists with the name given.\")\n","\n","# display data of one country to check if the cleaned data is loaded\n","print(\"Displaying data for USA: \")\n","display(df_cleaned_us.head())\n","\n","# create a list of clean dataframes for further analysis\n","list_cleaned_df=[df_cleaned_us, df_cleaned_in, df_cleaned_cn, df_cleaned_jp, df_cleaned_ca, df_cleaned_gb, df_cleaned_za]\n","Successfully read all the files\n","Displaying data for USA:\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t327,167,434.0\t165,285,036.0\t161,882,398.0\t15.7\t8.7\t12.0\t19.4\t1.4\t0.8\t8.5\t3.9\t20,544,343,456,936.5\t1.7\t267,900,000,000.0\t152,778,873,809.5\t10,318.0\t6.0\t89.3\t2018\tUSA\n","1\t325,147,121.0\t164,275,323.0\t160,871,798.0\t11.8\t8.5\t12.0\t19.7\t1.4\t0.8\t8.7\t4.4\t19,485,393,853,000.0\t2.2\t243,296,000,000.0\t178,579,605,000.0\t10,318.0\t6.0\t89.3\t2017\tUSA\n","2\t323,071,342.0\t163,245,729.0\t159,825,613.0\t12.2\t8.5\t12.0\t19.8\t1.4\t0.8\t8.7\t4.9\t18,707,188,235,000.0\t-0.1\t218,168,000,000.0\t175,923,170,000.0\t10,318.0\t6.0\t89.3\t2016\tUSA\n","3\t320,742,673.0\t162,097,641.0\t158,645,032.0\t12.4\t8.4\t12.0\t19.9\t1.4\t0.7\t8.8\t5.3\t18,219,297,584,000.0\t2.4\t224,626,000,000.0\t189,947,276,000.0\t10,318.0\t8.7\t82.4\t2015\tUSA\n","4\t318,386,421.0\t160,946,480.0\t157,439,941.0\t12.5\t8.2\t12.0\t20.0\t1.4\t0.7\t8.9\t6.2\t17,521,746,534,000.0\t2.9\t241,062,000,000.0\t208,273,224,000.0\t12,994.0\t8.8\t83.1\t2014\tUSA\n","Prepare a combined DataFrame for further analysis\n","For each country, separate dataframes have been created. There may be cases when we may need the entire data across all countries in certain analysis. Hence it is a good idea to have a single combined dataframe ready.\n","\n","combined_df=pd.concat(list_cleaned_df,sort=False)\n","combined_df.head(200)\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\tYear\tCountry\n","0\t327,167,434.0\t165,285,036.0\t161,882,398.0\t15.7\t8.7\t12.0\t19.4\t1.4\t0.8\t8.5\t3.9\t20,544,343,456,936.5\t1.7\t267,900,000,000.0\t152,778,873,809.5\t10,318.0\t6.0\t89.3\t2018\tUSA\n","1\t325,147,121.0\t164,275,323.0\t160,871,798.0\t11.8\t8.5\t12.0\t19.7\t1.4\t0.8\t8.7\t4.4\t19,485,393,853,000.0\t2.2\t243,296,000,000.0\t178,579,605,000.0\t10,318.0\t6.0\t89.3\t2017\tUSA\n","2\t323,071,342.0\t163,245,729.0\t159,825,613.0\t12.2\t8.5\t12.0\t19.8\t1.4\t0.8\t8.7\t4.9\t18,707,188,235,000.0\t-0.1\t218,168,000,000.0\t175,923,170,000.0\t10,318.0\t6.0\t89.3\t2016\tUSA\n","3\t320,742,673.0\t162,097,641.0\t158,645,032.0\t12.4\t8.4\t12.0\t19.9\t1.4\t0.7\t8.8\t5.3\t18,219,297,584,000.0\t2.4\t224,626,000,000.0\t189,947,276,000.0\t10,318.0\t8.7\t82.4\t2015\tUSA\n","4\t318,386,421.0\t160,946,480.0\t157,439,941.0\t12.5\t8.2\t12.0\t20.0\t1.4\t0.7\t8.9\t6.2\t17,521,746,534,000.0\t2.9\t241,062,000,000.0\t208,273,224,000.0\t12,994.0\t8.8\t83.1\t2014\tUSA\n","...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\n","18\t126,843,000.0\t64,552,936.0\t62,290,064.0\t9.4\t7.7\t9.0\t31.4\t5.1\t5.5\t21.6\t4.7\t4,887,519,660,744.9\t2.5\t69,818,262,802.1\t75,072,263,386.7\t8,299.4\t3.9\t80.7\t2000\tJapan\n","19\t126,631,000.0\t64,416,945.0\t62,214,055.0\t9.3\t7.8\t9.0\t31.9\t5.2\t5.8\t22.1\t4.7\t4,562,078,822,335.5\t-0.8\t54,865,030,007.0\t73,017,589,819.0\t8,147.4\t3.8\t80.6\t1999\tJapan\n","20\t126,400,000.0\t64,270,952.0\t62,129,048.0\t9.6\t7.5\t9.0\t32.2\t5.3\t6.0\t22.8\t4.1\t4,032,509,760,872.9\t-1.9\t48,839,122,632.9\t65,831,559,150.0\t8,004.0\t4.0\t79.4\t1998\tJapan\n","21\t126,057,000.0\t64,068,675.0\t61,988,325.0\t9.5\t7.3\t9.0\t33.3\t5.4\t6.0\t24.2\t3.4\t4,414,732,843,544.4\t-0.0\t56,500,943,459.4\t68,751,451,555.4\t7,991.0\t4.1\t80.4\t1997\tJapan\n","22\t125,757,000.0\t63,890,191.0\t61,866,809.0\t9.6\t7.1\t9.0\t33.4\t5.5\t6.3\t24.7\t3.4\t4,833,712,542,207.1\t3.0\t56,995,323,550.2\t81,929,341,206.2\t7,835.4\t3.8\t81.2\t1996\tJapan\n","200 rows × 20 columns\n","\n","Descriptive Statistics\n","We can now analyse the data we have loaded. Descriptive statistics show the characteristics of numerical features. It gives information such as count, mean, mininum and maximum values etc. Hence we exclude the categorical features Year and Country from the combined DataFrame.\n","\n","# create a copy so that the original DF is not affected\n","# drop the columns year and country\n","df_copy=combined_df.drop(['Year', 'Country'], axis='columns')\n","df_copy.describe()\n","Total Population\tFemale Population\tMale Population\tBirth Rate\tDeath Rate\tCompulsory Education Dur.\tEmployment in Industry(%)\tEmployment in Agriculture(%)\tFemale Employment in Agriculture(%)\tFemale Employment in Industry(%)\tUnemployment(%)\tGDP in USD\tNational Income per Capita\tNet income from Abroad\tAgriculture value added(in USD)\tElectric Power Consumption(kWH per capita)\tRenewable Energy Consumption (%)\tFossil Fuel Consumption (%)\n","count\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\t413.0\n","mean\t349,611,508.7\t170,880,636.9\t178,730,871.8\t19.9\t9.4\t9.7\t24.1\t16.6\t17.7\t15.4\t8.4\t2,100,409,242,193.0\t2.9\t12,542,248,900.4\t84,920,838,838.5\t5,650.1\t17.6\t80.9\n","std\t430,522,054.6\t207,779,594.4\t222,772,709.2\t9.3\t3.1\t1.3\t3.7\t21.1\t24.9\t6.1\t8.2\t3,615,163,477,805.6\t3.8\t50,321,336,949.2\t137,934,730,440.0\t4,811.2\t15.1\t13.5\n","min\t17,099,840.0\t8,574,108.0\t8,525,732.0\t7.6\t5.9\t8.0\t15.3\t1.1\t0.6\t7.4\t2.1\t7,575,396,972.9\t-25.9\t-77,826,915,006.9\t807,799,677.2\t97.8\t0.6\t35.1\n","25%\t47,291,610.0\t23,976,130.0\t23,315,480.0\t12.8\t7.2\t9.0\t21.8\t1.8\t1.0\t10.6\t3.9\t137,774,755,609.1\t1.1\t-10,759,692,566.3\t16,730,104,729.7\t1,081.6\t4.3\t75.4\n","50%\t123,116,000.0\t62,425,974.0\t60,690,026.0\t16.6\t8.6\t9.0\t23.3\t4.7\t4.9\t14.7\t5.8\t543,300,000,000.0\t2.4\t-2,019,508,809.8\t38,018,588,193.9\t4,573.0\t17.2\t85.3\n","75%\t608,802,600.0\t293,362,998.0\t315,439,602.0\t23.7\t10.9\t11.0\t26.5\t43.2\t40.3\t18.8\t7.9\t2,290,432,075,123.8\t4.7\t12,619,000,000.0\t101,244,489,721.0\t8,266.1\t22.9\t89.0\n","max\t1,392,730,000.0\t677,972,245.0\t714,757,755.0\t43.4\t25.4\t12.0\t34.8\t63.0\t76.3\t29.7\t33.5\t20,544,343,456,936.5\t18.5\t267,900,000,000.0\t978,452,524,165.8\t17,264.7\t58.7\t99.5\n","We can oberve that there are total 413 records across all the countries. The values for each of the countries are varied. For example, consider female employment percentage in agriculture. The minimum value is 0.5% and the maximum is 76%. This means that some countries have a very low percentage of females in agriculture whereas some other countries have a good number of females employed in this field.\n","\n","Also, on observing the national income per capita, we can see that the lowest value is around -26. On observing the data carefully it was found that some countries do have a negative national income in some years. This may be probably because the country was in losses and there was no income as such.\n","\n","Correlation Matrix\n","A correlation matrix is a table that represents the correlation coefficients between different variables. It makes it easy to analyse which variables have a correlation with each other. This can be helpful in finding the relationship between the variables and further analysing them through different plots.\n","\n","# create a copy\n","df_cleaned_us_copy=df_cleaned_us.copy()\n","# Exclude the categorical features from the matrix\n","df_cleaned_us_copy.drop(['Year', 'Country'], inplace=True, axis='columns')\n","\n","# plot a correlation matrix\n","fig, ax = plt.subplots(figsize=(10,10))\n","sns.heatmap(df_cleaned_us_copy.corr(), cmap='RdBu', center=0,ax=ax)\n","plt.savefig('correlation_us.png')\n","plt.show()\n","\n","The above is the correlation matrix between features for USA. It is found that *Compulsory Education Duration* feature does not have any correlation with other features, hence, it can be excluded from our analysis. Also, *Income per capita* has a very weak correlation with other features and can be excluded. I have checked the correlation matrices for each of the countries and found that the fields Income per capita and Compulsory Education Duration have the same kind of correlation with other features. Only one correlation matrix has been included here as an example.\n","\n","Analysis Using Plots\n","Comparing Population of Countries in 2000 and 2018:\n","Since we have the data for different countries, we can compare how the population for different countries has changed in 2018 - the most recent year, as opposed to 2000. The following code prepares two DataFrames - one for each year under consideration. We extract the column Total Population. The difference in population has been shown using a grouped bar chart.\n","\n","# refer to the list of countries\n","list_countries = COUNTRY_LIST\n","# intialise two dataframes df_00- year 2000, df_18 - year 2018\n","df_00 = pd.DataFrame()\n","df_18 = pd.DataFrame()\n","\n","# for each dataframe in the list of cleaned dataframes\n","for i,df in enumerate(list_cleaned_df):\n","    # pick the value of Total Population for year 2000 and 2018\n","    df_00[list_countries[i]] = df[df['Year'] == 2000][\"Total Population\"]\n","    df_18[list_countries[i]] = df[df['Year'] == 2018][\"Total Population\"]\n","\n","# The resulting dataframes have the countries as columns and the two rows each for 2000 and 2018\n","# To be able to draw a grouped bar plot we need the years as columns, hence we take a transpose\n","df_00 = df_00.T\n","df_18 = df_18.T\n","\n","pd.options.display.float_format = '{:,.1f}'.format  # set other global format\n","\n","# rename the columns to the year\n","df_00 = df_00.rename(columns={18 : 2000})\n","df_18 = df_18.rename(columns={0 : 2018})\n","\n","# join the dataframes for both the years\n","df_both_years= df_00.join(df_18)\n","\n","# the index is the Country name, hence we add it as a column into the data frame.\n","df_both_years['Countries'] = df_both_years.index\n","\n","# drop the original index\n","df_both_years.reset_index(drop=True)\n","\n","print(\"Data of Total Population for 2000 and 2018 for all countries: \")\n","display(df_both_years)\n","Data of Total Population for 2000 and 2018 for all countries:\n","2000\t2018\tCountries\n","USA\t282,162,411.0\t327,167,434.0\tUSA\n","India\t1,056,575,549.0\t1,352,617,328.0\tIndia\n","China\t1,262,645,000.0\t1,392,730,000.0\tChina\n","Japan\t126,843,000.0\t126,529,100.0\tJapan\n","Canada\t30,685,730.0\t37,058,856.0\tCanada\n","Great Britain\t58,892,514.0\t66,488,991.0\tGreat Britain\n","South Africa\t44,967,708.0\t57,779,622.0\tSouth Africa\n","plt.figure(figsize=(7, 5))\n","# plot the chart using matplotlib.pyplot library\n","df_both_years.plot(kind='bar',x='Countries',y=[2000, 2018])\n","<matplotlib.axes._subplots.AxesSubplot at 0x26b1a6d3048>\n","<Figure size 504x360 with 0 Axes>\n","\n","We can see that India and China both have the highest population in both the years. However, the increase in population for India in year 2018 is more as compared to the increase in China making their population almost comparable. Canada has the least population amongst all with marginal increase. One striking observation is for Japan - the population is the same in both 2000 and 2018 signifying good population control mechanisms in the country.\n","\n","Average Birth Rate and Death Rate for countries across all the years\n","We have compared the total population in 2000 and 2018 for various countries. Now let us compare the average birth rate and death rate for different countries. Using the combined dataframe that contains the data for all the features for all the countries, we have grouped the rows by country and found the mean birth rate and death rate. I have used a bar chart and sorted the countries in descending order of birth rate and death rate.\n","\n","The following function has been implemented:\n","\n","group_df(): This function takes a column name as a parameter and returns a new DF with the data for countrywise average for the specified feature.\n","plot_bar(): This function takes a dataframe as an argument and plots a bar chart based on the X and Y features\n","def group_df(feature):\n","    # create a new dataframe\n","    df_grouped=pd.DataFrame()\n","\n","    # find average for each country\n","    df_grouped['Avg. ' + feature]=combined_df.groupby('Country')[feature].mean()\n","\n","    # set the index as a column - countries\n","    df_grouped['Country']=df_grouped.index\n","\n","    # drop the index\n","    df_grouped.reset_index(drop=True, inplace=True)\n","\n","    # sort the rows based of Avg Birth rate\n","    df_grouped.sort_values('Avg. '+feature, inplace=True, ascending=False)\n","\n","    print(\"Avg. \" + feature)\n","    display(df_grouped)\n","\n","    return df_grouped\n","\n","def plot_bar(df, x_feature, y_feature):\n","    # bar plot\n","    plt.figure(figsize=(8, 5))\n","    sns.set(style=\"whitegrid\")\n","    ax = sns.barplot(\n","        data= df,\n","        x= x_feature,\n","        y= \"Avg. \" + y_feature)\n","df_birth=group_df('Birth Rate')\n","plot_bar(df_birth, 'Country', 'Birth Rate')\n","\n","print(\"========================================================\")\n","df_death=group_df('Death Rate')\n","plot_bar(df_death, 'Country', 'Death Rate')\n","Avg. Birth Rate\n","Avg. Birth Rate\tCountry\n","3\t31.3\tIndia\n","5\t30.8\tSouth Africa\n","1\t20.5\tChina\n","6\t15.7\tUSA\n","0\t14.7\tCanada\n","2\t13.7\tGreat Britain\n","4\t12.4\tJapan\n","========================================================\n","Avg. Death Rate\n","Avg. Death Rate\tCountry\n","3\t12.3\tIndia\n","5\t11.9\tSouth Africa\n","2\t10.9\tGreat Britain\n","6\t8.7\tUSA\n","1\t7.6\tChina\n","4\t7.5\tJapan\n","0\t7.2\tCanada\n","\n","\n","From the above two plots we can see that India has the highest Avg Birth Rate as well as Avg Death Rate which is interesting since it had the second highest population in 2018. Similar is the trend for South Africa which is again surprising since South Africa had a very low population. For China, the Birth Rate is higher than the Death Rate thus leading to the highest population in the world. For Great Britain the Death Rate is much higher than the Average Birth Rate, leading to low population.\n","\n","GDP for all countries in the last 10 years\n","I have used a line chart to show how the GDP for various countries has varied over the last 10 years. We extract the columns Year, GDP in USD and Country from each of the country's dataframe and store it in a smaller dataframe for plotting. A line plot clearly shows the trends over a period of time and can also be used to compare the trends of different categories.\n","\n","# function to to form a dataframe with Year, GDP and Country\n","def extract_columns(df_cleaned):\n","    df=pd.DataFrame()\n","    # pick data for the recent 10 years, note that the data sorted in descending order of year\n","    df['Year']=df_cleaned.loc[:10, 'Year']\n","    df['GDP in USD']=df_cleaned.loc[:10, 'GDP in USD']\n","    df['Country']=df_cleaned.loc[:10, 'Country']\n","    return df\n","\n","# function to fetch a single dataframe with 3 features from each country\n","def form_gdp_df():\n","    # function call to extract_columns()\n","    indf=extract_columns(df_cleaned_in)\n","    usdf=extract_columns(df_cleaned_us)\n","    cndf=extract_columns(df_cleaned_cn)\n","    jpdf=extract_columns(df_cleaned_jp)\n","    cadf=extract_columns(df_cleaned_ca)\n","    gbdf=extract_columns(df_cleaned_gb)\n","    zadf=extract_columns(df_cleaned_za)\n","    # combine the 7 dfs into a single df with 3 columns\n","    # we ignore the original index\n","    gdp_df=pd.concat([indf, usdf, cndf, jpdf, cadf, gbdf, zadf], ignore_index=True)\n","    return gdp_df\n","\n","# get the combined DF\n","gdp_df=form_gdp_df()\n","\n","print(\"Few records from the Dataframe containing Year, GDP and Country:\")\n","display(gdp_df.head())\n","\n","# set figure size\n","plt.figure(figsize=(7, 5))\n","sns.set(style=\"whitegrid\")\n","# plot using seaborn library\n","ax=sns.lineplot(x='Year', y='GDP in USD', hue='Country', style=\"Country\",palette=\"Set2\", markers=True, dashes=False, data=gdp_df, linewidth=2.5)\n","Few records from the Dataframe containing Year, GDP and Country:\n","Year\tGDP in USD\tCountry\n","0\t2018\t2,718,732,231,257.6\tIndia\n","1\t2017\t2,652,242,857,923.9\tIndia\n","2\t2016\t2,290,432,075,123.8\tIndia\n","3\t2015\t2,103,587,813,812.8\tIndia\n","4\t2014\t2,039,127,446,298.6\tIndia\n","\n","We can see that USA has the highest GDP amongst all countries which is clear throughout the years. The GDP for China was low in the year 2008 and shows a significant rise upto 2018 which is attributed to their progress in various fields like manufacturing, however, in comparison to USA, it is still very less.\n","\n","For Japan, the GDP shows a slight rise upto 2012 which may be due to Japan's growth strategy that was adopted to pull it out from deflation, but thereafter there is a dip in the GDP.\n","\n","Electric Power Consumption vs Population for India and China\n","As seen from the population grouped bar plot above, India and China are the most populated countries. Let us examine the Electric power consumption in these countries. For this task, I have extracted the Population, Country and Electric Power consumption from the dataframes for these two countries and visualised them using a scatter plot.\n","\n","# function to extract specific columns from the DFs for India and China\n","def form_in_cn_df():\n","    # for India\n","    indf=df_cleaned_in[['Total Population', 'Electric Power Consumption(kWH per capita)', 'Country']]\n","    # for China\n","    cndf=df_cleaned_cn[['Total Population', 'Electric Power Consumption(kWH per capita)', 'Country']]\n","    # combine the two dataframes\n","    in_cn_df=pd.concat([indf, cndf])\n","    return in_cn_df\n","\n","# get the desired data\n","in_cn_df=form_in_cn_df()\n","print(\"Few records from the selected features: \")\n","display(in_cn_df.head())\n","\n","# scatter plot\n","plt.figure(figsize=(7, 5))\n","sns.set(style=\"whitegrid\")\n","ax=sns.scatterplot(x='Total Population', y='Electric Power Consumption(kWH per capita)', hue='Country', palette=\"bright\", data=in_cn_df)\n","Few records from the selected features:\n","Total Population\tElectric Power Consumption(kWH per capita)\tCountry\n","0\t1,352,617,328.0\t335.2\tIndia\n","1\t1,338,658,835.0\t335.2\tIndia\n","2\t1,324,509,589.0\t335.2\tIndia\n","3\t1,310,152,403.0\t335.2\tIndia\n","4\t1,295,604,184.0\t804.5\tIndia\n","\n","From the above plot it is clear that with the increase in the population, the electric power consumption is bound to increase. This is evident from the sudden shooting up of the electric power consumption of China. For India there has been a gradual increase in the consumption with population.The constant values in both the lines indicate the mean consumption.\n","\n","Total Population vs Electric Power consumption for Canada upto 2015\n","Canada is a country with very low population. Let us analyse if the population has any effect on the Electrical Energy Consumption in this country upto the year 2015. I have used a single line plot to see the trend with increase in population.\n","\n","# read the columns from the df for Canada\n","df=df_cleaned_ca.loc[3:, ['Electric Power Consumption(kWH per capita)','Total Population', 'Year']]\n","\n","print(\"First few records of the data: \")\n","display(df.head())\n","\n","# line plot\n","plt.figure(figsize=(6, 5))\n","sns.set(style=\"whitegrid\")\n","sns.lineplot(x='Total Population', y='Electric Power Consumption(kWH per capita)', palette=\"colorblind\",data=df, linewidth=2.5)\n","First few records of the data:\n","Electric Power Consumption(kWH per capita)\tTotal Population\tYear\n","3\t13,266.0\t35,702,908.0\t2015\n","4\t15,588.5\t35,437,435.0\t2014\n","5\t15,750.8\t35,082,954.0\t2013\n","6\t15,336.6\t34,714,222.0\t2012\n","7\t15,644.5\t34,339,328.0\t2011\n","<matplotlib.axes._subplots.AxesSubplot at 0x26b1b2836c8>\n","\n","From the above plot we can observe that for Canada the Electric power consumption has risen constantly with the rise in population. However, it remained constant after a point and thereafter reduced. Although the population in Canada is the least, it has a high electric power consumption which may be due to the extremely lower temperatures in the country.\n","\n","Variation in different Energy Consumption over the years for Russia\n","For this analysis, I have chosen the energy consumption data for Russia over the years upto 2010 and plotted a multi-line chart to observe the trend.\n","\n","# Pick the columns Year, and 3 different power consumptions from the dataframe for russia\n","plt.plot(df_cleaned_in.loc[5:, ['Year']],df_cleaned_in.loc[5:, ['Electric Power Consumption(kWH per capita)']],'.-')\n","plt.plot(df_cleaned_in.loc[5:, ['Year']],df_cleaned_in.loc[5:, ['Renewable Energy Consumption (%)']],'.-')\n","plt.plot(df_cleaned_in.loc[5:, ['Year']],df_cleaned_in.loc[5:, ['Fossil Fuel Consumption (%)']],'.-')\n","\n","plt.legend(['Electric Power Consumption(kWH per capita)', 'Renewable Energy Consumption(%)', 'Fossil Fuel Consumption(%)'], loc='best')\n","plt.title(\"Energy Consumption in Russia\\n\")\n","plt.xlabel('Year')\n","plt.ylabel('Energy Consumption')\n","plt.show()\n","\n","From this plot, it can be observed that The Electric power consumption has increased significantly over time. On the other hand, the consumption for Fossil Fuels and Renewable Energy is low as compared to electrical energy. Fossil Fuel consumption seems to have increased between 2000 and 2010.\n","\n","Employment in the Agricultural sector in Countries in the year 2015\n","Let us examine which country has the most percentage of females employed in Agriculture in the year 2015. For this, I have used extracted Employment in Agriculture column from the DF for each country and displayed the values using a Bar plot.\n","\n","# get the list of countries\n","list_countries=COUNTRY_LIST\n","\n","df_agr_emp=pd.DataFrame()\n","\n","# iterate over the dataframe\n","for i,df in enumerate(list_cleaned_df):\n","    # store the % Employment in Agriculture for each country\n","    df_agr_emp[list_countries[i]]=df[df['Year'] == 2015][\"Employment in Agriculture(%)\"]\n","\n","# take the transpose\n","df_agr_emp=df_agr_emp.T\n","\n","pd.options.display.float_format = '{:,.1f}'.format  # set other global format\n","\n","# since we took a transpose to get countries as the rows, the row index shows the names of the countries.\n","# Add it as a column in the DF\n","df_agr_emp['Countries'] = df_agr_emp.index\n","# drop the index\n","df_agr_emp.reset_index(drop=True, inplace=True)\n","# The index for Employment % in agriculture needs to be renamed to the actual column name\n","df_agr_emp=df_agr_emp.rename(columns={3: \"Employment in Agriculture(%)\"})\n","\n","# sort the rows based in decreasing order of % Employment\n","df_agr_emp.sort_values('Employment in Agriculture(%)', inplace=True, ascending=False)\n","\n","print(\"Employment in Agriculture data for 2015: \")\n","display(df_agr_emp)\n","\n","# bar plot\n","plt.figure(figsize=(8, 5))\n","sns.set(style=\"whitegrid\")\n","ax = sns.barplot(\n","    data= df_agr_emp,\n","    x= 'Countries',\n","    y= 'Employment in Agriculture(%)')\n","Employment in Agriculture data for 2015:\n","Employment in Agriculture(%)\tCountries\n","1\t45.6\tIndia\n","2\t28.6\tChina\n","6\t5.6\tSouth Africa\n","3\t3.6\tJapan\n","4\t1.6\tCanada\n","0\t1.4\tUSA\n","5\t1.1\tGreat Britain\n","\n","From the above plot it is evident that India has the highest percentage of Employment out of the total employed people in Agriculture. This clearly reflects the fact that India is an agricultural nation and has many food items harvested in the country itself. Followed by India is China. In China there is a shortage of Arable Land and hence farming is very labor intensive. Hence the high percentage of employment in agriculture. The rest of the countries have very less percentage of Employment in agriculture. Great Britain has the least percentage in Agriculture which can be attributed to the fact that it produces less than 60% of the food that is consumed.\n","\n","Summary and Conclusion\n","The World bank dataset consists of a number of features which can be used to develop interesting patterns in the data. I have collected the data for 7 countries for about 20 features. The data was pre-processed to remove columns with too many missing values and fill missing values with the average values for the features. Another way would have been to remove records with missing fields, however, this was not done since the data consists of records for 59 years only (one record per year per country). Hence, removing these values would have resulted in a very small dataset not suitable for analysis. Other efficient techniques can be used to find missing values to enhance the analysis.\n","\n","Some analysis was done between the Population counts, birth rate and death rate which revealed some interesting patterns about how the birth rate and death rate affect the overall population. Similarly, based on the nature of the countries, it was found that India has highest percentage of Employment in agriculture. Other analyses on the power consumption variation with the total population also showed that electrical power consumption is the highest in most countries which relates to their population.\n","\n","Further to this, more analysis can be performed on the Employment features such as percentage of males and females in each sector and comparisons can be made across years in different countries.\n","\n","This analysis can also be used to develop predictive models to predict the population growth based on Birth Rate and Death Rate or GDP growth based on employment. The analysis can be extended in the future by including other features from the API like Arable land, Education, Health services, etc. and make predictions.\n","\n",""]},{"cell_type":"markdown","source":[],"metadata":{"id":"VKqtRQ_9gTQH"}}]}